package iHear_final;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.awt.event.KeyEvent.VK_ENTER;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import java.sql.Timestamp;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author SAI, Alexis
 */

public class Chat_acteur extends javax.swing.JFrame {

    /**
     * Creates new form Chat_acteur
     */
    public Chat_acteur() {
        initComponents();
    }

    private Timer timer1;

    public Chat_acteur(int id, String name, String adr) {
        idUser = id;
        nameUser = name;
        adresse = adr;
        initComponents();

        Timer timer1 = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doRefresh();
                System.out.println("refresh!");
            }

        });
        timer1.start();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jButton2 = new javax.swing.JButton();
        jTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea10 = new javax.swing.JTextArea();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea12 = new javax.swing.JTextArea();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTextArea14 = new javax.swing.JTextArea();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTextArea15 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();

        jFrame1.setTitle("bouh");
        jFrame1.setAlwaysOnTop(true);
        jFrame1.setBounds(new java.awt.Rectangle(50, 50, 300, 300));

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("iHear - " + nameUser);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusable(false);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setForeground(new java.awt.Color(153, 153, 153));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jPanel1MouseMoved(evt);
            }
        });

        jTabbedPane6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTabbedPane6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane6MouseClicked(evt);
            }
        });

        jButton2.setText("Rafraïchir");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldMouseClicked(evt);
            }
        });
        jTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldActionPerformed(evt);
            }
        });
        jTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldKeyPressed(evt);
            }
        });

        jButton1.setText("Envoyer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane10.setPreferredSize(new java.awt.Dimension(166, 80));

        jTextArea10.setEditable(false);
        jTextArea10.setColumns(5);
        jTextArea10.setRows(5);
        jTextArea10.setTabSize(5);
        jTextArea10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Connecté(s)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Linux Libertine G", 1, 14), new java.awt.Color(0, 102, 0))); // NOI18N
        jTextArea10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane10.setViewportView(jTextArea10);

        jScrollPane12.setPreferredSize(new java.awt.Dimension(166, 80));

        jTextArea12.setEditable(false);
        jTextArea12.setColumns(5);
        jTextArea12.setRows(5);
        jTextArea12.setTabSize(5);
        jTextArea12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Spectateur(s) Présent(s)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Linux Libertine G", 1, 14), new java.awt.Color(51, 51, 51))); // NOI18N
        jScrollPane12.setViewportView(jTextArea12);

        jScrollPane14.setPreferredSize(new java.awt.Dimension(166, 80));

        jTextArea14.setEditable(false);
        jTextArea14.setColumns(5);
        jTextArea14.setRows(5);
        jTextArea14.setTabSize(5);
        jTextArea14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Spectateur(s) Absent(s)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Linux Libertine G", 1, 14), new java.awt.Color(255, 204, 0))); // NOI18N
        jScrollPane14.setViewportView(jTextArea14);

        jScrollPane15.setPreferredSize(new java.awt.Dimension(166, 80));

        jTextArea15.setEditable(false);
        jTextArea15.setColumns(5);
        jTextArea15.setRows(5);
        jTextArea15.setTabSize(5);
        jTextArea15.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Non connecté(s)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Linux Libertine G", 1, 14), new java.awt.Color(153, 0, 0))); // NOI18N
        jScrollPane15.setViewportView(jTextArea15);

        jButton3.setText("+");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 751, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTabbedPane6)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        startConnection(adresse);
rafraichir();
rafraichir();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Begin the connection between the program and the database.
     * @param adresse : the adress where the database is.
     * @return true if the connection is effective.
     * else it returns false.
     */
    private boolean startConnection(String adresse){
        /* Code relatif à la connexion à la base de données */
        /* Chargement du driver JDBC pour MySQL */
        String urlBDD = "jdbc:mysql://" + adresse + ":3306/projet_java";
        String user = "root";
        String password = "";
        c = null;

        try {
            Class.forName( "com.mysql.jdbc.Driver" );
        } catch ( ClassNotFoundException e ) {
            /* Gérer les éventuelles erreurs ici. */
            //System.exit(0); /* Penser à l'affichage d'une erreur */
            System.out.println("ERREUR SGBD");
            return false; /*On divulge la non connexion*/
        }

        try{
            c = DriverManager.getConnection(urlBDD, user, password);
            /* requete ici*/

            System.out.println("Connection OK.");
        } catch ( SQLException e ) {
            /* Gérer les éventuelles erreurs ici */
            System.out.println(e);
            return false;
        }

        return true; /* On confirme la connexion */
    }

    /**
     * Disconnect the client.
     */
    private void endConnection(){
        if ( c != null )
            try {
            /* Fermeture de la connexion */
                System.out.println("Connection KO.");
                c.close();
                c = null;
            } catch ( SQLException ignore ) {
            /* Si une erreur survient lors de la fermeture, il suffit de l'ignorer. */

            }

    }

    /**
     * Update the database : the specified user is put online/offline.
     * @param idUser : the id of the user.
     * @param arg : 1-online, 0-offline.
     */
    private void setUserOnline(int idUser, boolean arg){
        Statement s = null;
        int r = 0;

        /* Préparation des variables */
        try {
            s = c.createStatement();
            r = s.executeUpdate("UPDATE UTILISATEURS SET estConnecte="+ arg +" WHERE idUser = '" + idUser + "'");

        } catch ( SQLException e ) {
            System.out.println("funtion creerUtilisateur() " + e);
        }
    }

    /**
     * Graphic function : add a new scroll at the jTabbedPane.
     */
    private void addScroll() {

        javax.swing.JTextArea j = new javax.swing.JTextArea(); /* Création du contenu */
        javax.swing.JScrollPane k = new javax.swing.JScrollPane(); /* Création onglet */
        j.setEditable(false); /* On empeche l'utilisateur de pouvoir directement modifier la fenetre */
        j.setColumns(20);
        j.setRows(5);

        k.setViewportView(j);

        indexOnglet++; /* Incrémentation de l'onglet */
        onglet.add(k); /* Ajout à l'array list */
        contenuOnglet.add(j); /* Ajout à l'array list */

        jTabbedPane6.addTab("Room" + indexOnglet, onglet.get(indexOnglet)); /* On nomme la fenetre et on l'ajoute au jTabbedPane */
    }

    /**
     * Graphic function : delete the last scroll added at the jTabbedPane.
     */
    private void deleteScroll(){
        if(indexOnglet > -1){ /* Controle de la position de l'index */
            onglet.remove(indexOnglet); /* On enleve l'onglet de l'Array List */
            contenuOnglet.remove(indexOnglet); /* On enleve le contenu de l'Array List */
            jTabbedPane6.remove(indexOnglet); /* On l'enleve aussi du jTabbedPane */
            indexOnglet--; /* On décrémente l'index */
        }

    }

    /**
     * Send the localMessage to the actual saloon in the database.
     * @param m : is the localMessage.
     */
    private void envoyer(LocalMessage m){
        if(!m.getText().isEmpty()){ /* Si le message n'est pas vide */
            contenuOnglet.get(jTabbedPane6.getSelectedIndex()).setText(contenuOnglet.get(jTabbedPane6.getSelectedIndex()).getText() + "\n" + "(" + m.getTime() + ") " + m.getAuthor() + " : " + m.getText());
        }
    }

    /**
     * Create a localMessage from the inputText and send it to the actual saloon in the database.
     */
    private void envoyer(){
        /* Création et affichage du message local */
        /* Si le texte que l'utilisateur n'est pas vide, on envoie */
        LocalMessage l = new LocalMessage();

        if(!jTextField.getText().isEmpty()){
            /* Création du message */

            l.setAuthor(nameUser); /* Ajout de l'auteur */
            l.setText(remplaceThisIn('\'', jTextField.getText())); /* Ajout du texte depuis la zone de saisie */

            java.util.Date date= new java.util.Date();
            l.setTime(new Timestamp(date.getTime()).toString());

            jTextField.setText(""); /*On vide la zone de saisie */

            /*if(!contenuOnglet.get(jTabbedPane6.getSelectedIndex()).getText().isEmpty()){
                contenuOnglet.get(jTabbedPane6.getSelectedIndex()).setText(contenuOnglet.get(jTabbedPane6.getSelectedIndex()).getText() + "\n(" + l.getTime() + ") " +  l.getAuthor() + " : " + l.getText());
            }
            else {
                contenuOnglet.get(jTabbedPane6.getSelectedIndex()).setText("(" + l.getTime() + ") " + l.getAuthor() + " : " + l.getText());
            }*/
        }

        if(jTextField.getBackground() != Color.gray){ /* SI la zone n'est pas grisée, on envoie !
            /* Création de l'objet gérant les requêtes MySQL */
            Statement s = null;
            int r = 0;
            int idSalon;
            int j = 0; /* Variable de parcourt */
            ArrayList<LocalMessage> list = new ArrayList(); /* Création de la liste de message */

            idSalon = salons.get(jTabbedPane6.getSelectedIndex());

            try {
                s = c.createStatement();
                r = s.executeUpdate( "INSERT INTO MESSAGE (idMessage, timestampmessage, contenu, auteur, idUser, idSalon) VALUES (NULL,'" +l.getTime()+"','"+l.getText()+"','"+l.getAuthor()+"','"+idUser+"','"+idSalon+"');" );

            } catch ( SQLException e ) {
                System.out.println("funtion rafraichir() " + e);
            } finally {
                if ( s != null ) { /* fermeture statement */
                    try {
                        s.close();
                    } catch ( SQLException ignore ) {
                    }
                }
            }
        }
    }

    /**
     * Graphic function : if the user is not able to write in the saloon : make the input text gray.
     * else make it white.
     */
    private void cacherSaisie(){
        Statement s = null;
        ResultSet r = null;

        try{
            s = c.createStatement();
            r = s.executeQuery("SELECT ROLE FROM UTILISER WHERE idUser like '" + idUser + "' and idSalon like '" + salons.get(jTabbedPane6.getSelectedIndex())+ "'");

            r.next();

            jTextField.setBackground(Color.white);

            if(r.getInt("role") == 0)
                jTextField.setBackground(Color.gray);


        } catch ( SQLException e ) {
            System.out.println("funtion getIdSaloon() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }
    }

    /**
     * Put all user connected who are able to write in the actual saloon in the section "Connecté(s)"
     * and all user not connected who are able to write in the actual saloon in the section "Non Connecté(s)"
     * @param uConnect is the list of user who are able to write in the actual saloon.
     */
    private void grAfficherConnecte(ArrayList<Integer> uConnect){
        Statement s = null;
        ResultSet r = null;

        try{
            s = c.createStatement();
            r = s.executeQuery("SELECT idUser, username, estConnecte FROM UTILISATEURS");

            while(r.next()){
                for(int i = 0; i < uConnect.size(); i++){
                    if(r.getInt("idUser") == uConnect.get(i) && r.getInt("estConnecte") == 1){
                        System.out.println("ID : " + uConnect.get(i));
                        jTextArea10.setText(jTextArea10.getText() + r.getString("username") + '\n');
                    }
                    else if(r.getInt("idUser") == uConnect.get(i) && r.getInt("estConnecte") == 0){
                        System.out.println("ID : " + uConnect.get(i));
                        jTextArea15.setText(jTextArea15.getText() + r.getString("username") + '\n');
                    }
                }
            }
        } catch ( SQLException e ) {
            System.out.println("funtion getIdSaloon() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }
    }

    /**
     * Put all user connected who are not able to write in the actual saloon in the section "Spectateur(s) Présent(s)"
     * and all user not connected who are able not to write in the actual saloon in the section "Spectateur(s) Non Absent(s)"
     * @param uSpectator is the list of user who are not able to write in the actual saloon.
     */
    private void grAfficherSpectateur(ArrayList<Integer> uSpectator){
        Statement s = null;
        ResultSet r = null;

        try{
            s = c.createStatement();
            r = s.executeQuery("SELECT idUser, username, estConnecte FROM UTILISATEURS");

            while(r.next()){
                for(int i = 0; i < uSpectator.size(); i++){
                    if(r.getInt("idUser") == uSpectator.get(i) && r.getInt("estConnecte") == 1){
                        System.out.println("ID : " + uSpectator.get(i));
                        jTextArea12.setText(jTextArea12.getText() + r.getString("username") + '\n');
                    }
                    else if(r.getInt("idUser") == uSpectator.get(i) && r.getInt("estConnecte") == 0){
                        System.out.println("ID : " + uSpectator.get(i));
                        jTextArea14.setText(jTextArea14.getText() + r.getString("username") + '\n');
                    }
                }
            }
        } catch ( SQLException e ) {
            System.out.println("funtion getIdSaloon() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }
    }

    /**
     * Make appear all user who are in the actual saloon in the sections at the right.
     */
    private void afficherConnecte(){
        Statement s = null;
        ResultSet r = null;

        ArrayList<Integer> uConnect = new ArrayList();
        ArrayList<Integer> uSpectator = new ArrayList();

        jTextArea10.setText("");
        jTextArea14.setText("");
        jTextArea15.setText("");
        jTextArea12.setText("");

        try{
            s = c.createStatement();
            r = s.executeQuery("SELECT idUser, role FROM UTILISER WHERE idSalon like '" + salons.get(jTabbedPane6.getSelectedIndex())+ "'");

            while(r.next()){
                if(r.getInt("role") == 1)
                    uConnect.add(r.getInt("idUser"));

                else
                    uSpectator.add(r.getInt("idUser"));
            }

        } catch ( SQLException e ) {
            System.out.println("funtion getIdSaloon() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }

        for(int i = 0; i < uConnect.size(); i++)
            System.out.println(uConnect.get(i));
        grAfficherConnecte(uConnect);
        grAfficherSpectateur(uSpectator);
    }

    /**
     * Get all message from the database for the actual saloon.
     */
    private void rafraichirSalon(){
        /* Création de l'objet gérant les requêtes MySQL */
        Statement s = null;
        ResultSet r = null;
        int idSalon;
        int j = 0; /* Variable de parcourt */
        LocalMessage courant = new LocalMessage();
        ArrayList<LocalMessage> list = new ArrayList(); /* Création de la liste de message */

        idSalon = salons.get(jTabbedPane6.getSelectedIndex());

        contenuOnglet.get(jTabbedPane6.getSelectedIndex()).setText("");

        try {
            s = c.createStatement();
            r = s.executeQuery("SELECT * FROM MESSAGE WHERE idSalon like " + idSalon); /* On selectionne tout dans le salon */

            while ( r.next() ) { /* On parcourt les résultats de la recherche */
                courant.setAuthor(r.getString("auteur"));
                courant.setText(r.getString("contenu"));
                courant.setTime(r.getString("timestampmessage"));

                envoyer(courant);

            }


        } catch ( SQLException e ) {
            System.out.println("funtion rafraichir() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }

        afficherConnecte();
    }

    /**
     * Open tabs for each saloon for the actual user in the database.
     */
    private void rafraichir(){
        /* On tire depuis la base de donnée */
        /* On peut commencer un statement si la connexion est ouverte */

        for(int i = 0; i <= jTabbedPane6.getTabCount() ; i++)
            deleteScroll();

        if(c != null){

            salons = new ArrayList();
            nameSalons = new ArrayList();

            /* Création de l'objet gérant les requêtes MySQL */
            Statement s = null;
            ResultSet r = null;

            int j = 0; /* Varible de parcourt */


            try {
                /*
                 * Ouverture de la connexion, initialisation d'un Statement, initialisation d'un ResultSet, etc.
                 */
                s = c.createStatement();
                r = s.executeQuery("SELECT idSalon FROM UTILISER WHERE idUser like " + idUser);

                while ( r.next() ) { /* On parcourt les résultats de la recherche */
                    salons.add(r.getInt("idSalon")); /* On ajoute l'idSalon dans l'ArrayList */
                }

                for(int i = 0; i < salons.size(); i++){
                    r = s.executeQuery("SELECT intitule FROM SALONS Where idSalon like " + salons.get(i));  /* On récupère le nom de chaque salon */

                    while(r.next()){
                        nameSalons.add(r.getString("intitule"));
                        j++;
                    }
                }

            } catch ( SQLException e ) {
                System.out.println("funtion rafraichir() " + e);
            } finally {
                if ( r != null ) { /* fermeture resultset */
                    try {
                        r.close();
                    } catch ( SQLException ignore ) {
                    }
                }
                if ( s != null ) { /* fermeture statement */
                    try {
                        s.close();
                    } catch ( SQLException ignore ) {
                    }
                }
            }

            /* Dans l'arraylist salons sont contenu les id de Salons */
            /* Traitement de l'ArrayList */

            if(!salons.isEmpty()){ /* On vérifie que l'utilisateur appartient bien à des salons */
                //indexOnglet = 0;
                for(int i = 0; i < j; i++){ /* On parcourt la AL */
                    addScroll(); /* On ajoute le nombre de fenetre qu'il faut */
                    jTabbedPane6.setTitleAt(i, nameSalons.get(i).toString());
                }
            }

        }

        doRefresh();

    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        setUserOnline(idUser, false);
        endConnection();
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        /* Si l'utilisateur a cliqué sur le bouton ENVOYER, on envoie */
        envoyer();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldKeyPressed
        /* On envoie un message si l'utilisateur appuie sur ENTREE depuis la zone de saisie */
        if(evt.getKeyCode() == VK_ENTER){
            envoyer();
        }
    }//GEN-LAST:event_jTextFieldKeyPressed

    /* Events */

    private void jTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextFieldActionPerformed

    private void jTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldMouseClicked
        // TODO add your handling code here:
        //doRefresh();
    }//GEN-LAST:event_jTextFieldMouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        /* Si l'utilisateur a appuyé sur le bouton RAFRAICHIR, on rafraichit la zone de texte */
        rafraichir();

    }//GEN-LAST:event_jButton2MouseClicked

    private void jPanel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseMoved
        // TODO add your handling code here:
        //doRefresh();
    }//GEN-LAST:event_jPanel1MouseMoved

    private void paintRefresh(){
        /* Création de l'objet gérant les requêtes MySQL */
        Statement s = null;
        ResultSet r = null;
        int idSalon;
        int j = 0; /* Variable de parcourt */

        idSalon = salons.get(jTabbedPane6.getSelectedIndex());

        try {
            s = c.createStatement();
            r = s.executeQuery("SELECT couleur FROM SALONS WHERE idSalon like " + idSalon); /* On selectionne tout dans le salon */

            if(r.next()){
                switch(r.getString("couleur")){
                    case "white":
                        jPanel1.setBackground(Color.white);
                        break;
                    case "blue":
                        jPanel1.setBackground(Color.blue);
                        break;
                    case "red":
                        jPanel1.setBackground(Color.red);
                        break;
                    case "pink":
                        jPanel1.setBackground(Color.pink);
                        break;
                    case "green":
                        jPanel1.setBackground(Color.green);
                        break;
                    case "yellow":
                        jPanel1.setBackground(Color.yellow);
                        break;
                    default:
                        jPanel1.setBackground(Color.gray);
                        break;
                }
            }


        } catch ( SQLException e ) {
            System.out.println("function rafraichir() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }
    }

    private void doRefresh(){
        rafraichir();
        rafraichirSalon();
        cacherSaisie();
    }

    private String remplaceThisIn(char toProtect, String data){
        String retour = "";

        for(int i = 0; i < data.length(); i++){
            if(data.charAt(i) == toProtect){
                retour = retour + '\\' + data.charAt(i);
            }
            else{
                retour = retour + data.charAt(i);
            }

        }
        return retour;
    }

    private boolean cmpString(String cmp, String cmp2){
        boolean retour = true;

        if(cmp.length() != cmp2.length())
            retour = false;

        if(retour)
            for(int i = 0; i < cmp.length(); i++){
                if(cmp.charAt(i) != cmp2.charAt(i)){
                    retour = false;
                }
            }

        return retour;
    }

    private int getIdUser(String username){
        Statement s = null;
        ResultSet r = null;
        int retour = 0;

        try{
            s = c.createStatement();
            r = s.executeQuery("SELECT idUser FROM UTILISATEURS WHERE username like '" + username + "'");

            if(r.next()){
                retour = r.getInt("idUser");
            }

        } catch ( SQLException e ) {
            System.out.println("funtion getIdUser() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }

        return retour;
    }

    private boolean getPseudoByDatabase(String pseudo){
        Statement s = null;
        ResultSet r = null;
        boolean retour = false;

        try{
            s = c.createStatement();
            r = s.executeQuery("SELECT username FROM UTILISATEURS WHERE username like '" + pseudo + "'");

            if(r.next()){
                if(cmpString(pseudo, r.getString("username"))){
                    /*System.out.println(r.getString("username"));*/
                    retour = true;
                }
            }

        } catch ( SQLException e ) {
            System.out.println("funtion getPseudoByDatabase() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }

        return retour;
    }

    private int getIdSaloon(String intitule){
        Statement s = null;
        ResultSet r = null;
        int retour = 0;

        try{
            s = c.createStatement();
            r = s.executeQuery("SELECT idSalon FROM SALONS WHERE intitule like '" + intitule + "'");

            if(r.next()){
                retour = r.getInt("idSalon");
            }

        } catch ( SQLException e ) {
            System.out.println("funtion getIdSaloon() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }

        return retour;
    }

    private boolean getSaloonByDatabase(String intitule){
        Statement s = null;
        ResultSet r = null;
        boolean retour = false;

        try{
            s = c.createStatement();
            r = s.executeQuery("SELECT intitule FROM SALONS WHERE intitule like '" + intitule + "'");

            if(r.next()){
                if(cmpString(intitule, r.getString("intitule"))){
                    /*System.out.println(r.getString("username"));*/
                    retour = true;
                }
            }

        } catch ( SQLException e ) {
            System.out.println("funtion getSaloonByDatabase() " + e);
        } finally {
            if ( r != null ) { /* fermeture resultset */
                try {
                    r.close();
                } catch ( SQLException ignore ) {
                }
            }
            if ( s != null ) { /* fermeture statement */
                try {
                    s.close();
                } catch ( SQLException ignore ) {
                }
            }
        }

        return retour;
    }

    private void ajouterLiens(String user1, String user2){
        Statement s = null;
        int r = 0;

        String intitule;

        if(user1.charAt(0) > user2.charAt(0))
            intitule = user1 + " - " + user2;
        else
            intitule = user2 + " - " + user1;

        /* Préparation des variables */
        String requete = "INSERT INTO UTILISER (idUser, idSalon, role) VALUES ('" + getIdUser(user1) + "', '" + getIdSaloon(intitule) + "', '" + 1 + "')";

        try {
            s = c.createStatement();
            r = s.executeUpdate(requete);

        } catch ( SQLException e ) {
            System.out.println("funtion creerSalon() " + e);
        }

        s = null;
        r = 0;

        /* Préparation des variables */
        requete = "INSERT INTO UTILISER (idUser, idSalon, role) VALUES ('" + getIdUser(user2) + "', '" + getIdSaloon(intitule) + "', '" + 1 + "')";

        try {
            s = c.createStatement();
            r = s.executeUpdate(requete);

        } catch ( SQLException e ) {
            System.out.println("funtion creerSalon() " + e);
        }


    }

    private void creerSalon(String user1, String user2){
        Statement s = null;
        int r = 0;

        String intitule;
        String couleur = "white";
        String description = "Conversation entre " + user1 + " et " + user2 + ".";

        if(user1.charAt(0) > user2.charAt(0))
            intitule = user1 + " - " + user2;
        else
            intitule = user2 + " - " + user1;

        /* Vérifier si le salon existe déjà */
        if(!getSaloonByDatabase(intitule)){
            /* Préparation des variables */
            String requete = "INSERT INTO SALONS (idSalon, intitule, couleur";
            String finRequete = "VALUES (DEFAULT, '" + intitule + "'";

            if(!couleur.isEmpty()){
                finRequete = finRequete + ", '" + couleur + "'";
            }
            else
                finRequete = finRequete + ", DEFAULT";

            if(!description.isEmpty()){
                requete = requete + ", description";
                finRequete = finRequete + ", '" + description + "'";
            }

            requete = requete + ") ";
            finRequete = finRequete + ")";

            try {
                s = c.createStatement();
                r = s.executeUpdate(requete + finRequete);

            } catch ( SQLException e ) {
                System.out.println("funtion creerSalon() " + e);
            }

            ajouterLiens(user1, user2);
        }

    }

    /* Ouvrir nouvelle conversation */
    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        String other = jTextField1.getText();
        Boolean creer = true;

        if(other.isEmpty()){
            jTextField1.setBackground(Color.red);
            creer = false;
        }
        else if(!getPseudoByDatabase(other)){
            jTextField1.setForeground(Color.red);
            creer = false;
        }
        else
            jTextField1.setBackground(Color.red);


        if(creer){
            creerSalon(nameUser, other);
            jTextField1.setText("");
            System.out.println("Création du salon !");
        }

        rafraichir();
    }//GEN-LAST:event_jButton3MouseClicked

    private void jTabbedPane6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane6MouseClicked
        // TODO add your handling code here:
        paintRefresh();
    }//GEN-LAST:event_jTabbedPane6MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.sql.SQLException
     */
    public static void main(String args[]) throws SQLException {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat_acteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat_acteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat_acteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat_acteur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /**/

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {

                new Chat_acteur().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTextArea jTextArea10;
    private javax.swing.JTextArea jTextArea12;
    private javax.swing.JTextArea jTextArea14;
    private javax.swing.JTextArea jTextArea15;
    private javax.swing.JTextField jTextField;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private ArrayList<JScrollPane> onglet = new ArrayList();
    private ArrayList<JTextArea> contenuOnglet = new ArrayList();
    private int indexOnglet = -1;
    private Connection c = null;
    ArrayList<Integer> salons;
    ArrayList<String> nameSalons;

    int idUser;
    String nameUser;
    String adresse;
}
